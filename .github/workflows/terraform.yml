# This is a basic workflow to help you get started with Actions

name: Terraform

on:
  # push:
  #   branches: [ "plan" ]
    
  workflow_dispatch:
    inputs:
      apply:
        description: 'Do terraform apply based on plan.tfplan stored as artifact'
        default: false
        required: false
        type: boolean
    

jobs:

  terraform:
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # - name: Load TF state
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: tfstate
      #     path: terraform.tfstate
      #   continue-on-error: true
      - id: getTerraformFiles
        name: Get Terraform Plan and State
        run: |
          $Repo = "${{ github.repository }}"
          $BaseUri = "https://api.github.com"
          $ArtifactUri = "$BaseUri/repos/$Repo/actions/artifacts"
          $Token = "${{ github.token }}" | ConvertTo-SecureString -AsPlainText
          $RestResponse = Invoke-RestMethod -Authentication Bearer -Uri $ArtifactUri -Token $Token | Select-Object -ExpandProperty artifacts
          if ($RestResponse){
            $MostRecentArtifactURI = $RestResponse | Sort-Object -Property created_at -Descending | where name -eq "tfplan" | Select-Object -First 1 | Select-Object -ExpandProperty archive_download_url
            Write-Host "Most recent PLAN artifact URI = $MostRecentArtifactURI"
            if ($MostRecentArtifactURI){
              Write-Host "Downloading artifact to plan.zip"
              Invoke-RestMethod -uri $MostRecentArtifactURI -Token $Token -Authentication bearer -outfile ./plan.zip
              Expand-Archive ./plan.zip
              Write-Host "Extracted plan.zip"
            }
            $MostRecentArtifactURI = $RestResponse | Sort-Object -Property created_at -Descending | where name -eq "tfstate" | Select-Object -First 1 | Select-Object -ExpandProperty archive_download_url
            Write-Host "Most recent STATE artifact URI = $MostRecentArtifactURI"
            if ($MostRecentArtifactURI){
              Write-Host "Downloading artifact to state.zip"
              Invoke-RestMethod -uri $MostRecentArtifactURI -Token $Token -Authentication bearer -outfile ./state.zip
              Expand-Archive ./state.zip
              Write-Host "Extracted state.zip"
              Move-Item -Path ./state/terraform.tfstate -Destination ./terraform.tfstate
              Write-Host "Terraform state:"
              gci terraform.tfstate
            }
          }
        shell: pwsh

      # - name: Load TF plan
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: tfplan
      #     path: plan.tfplan
      #   continue-on-error: true

      - name: terraform
        run: |
          cat ./policy/policy.json | jq
          sha1sum ./policy/policy.json
          echo "DO_APPLY: $DO_APPLY"
          terraform init
          
          if [ "$DO_APPLY" == "true" ]; then
            terraform apply -auto-approve plan/plan.tfplan
          else
            terraform plan -out=plan.tfplan
          fi
        env:
          DO_APPLY: ${{ inputs.apply }}
      
      - name: Save TF plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: plan.tfplan
        continue-on-error: true


      - name: Save TF state
        uses: actions/upload-artifact@v3
        with:
          name: tfstate
          path: terraform.tfstate
        continue-on-error: true
      
          
